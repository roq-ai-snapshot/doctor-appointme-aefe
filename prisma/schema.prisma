generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academy {
  id                            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                   String?       @db.VarChar(255)
  image                         String?       @db.VarChar(255)
  name                          String        @db.VarChar(255)
  created_at                    DateTime      @default(now()) @db.Timestamp(6)
  updated_at                    DateTime      @default(now()) @db.Timestamp(6)
  user_id                       String        @db.Uuid
  tenant_id                     String        @db.VarChar(255)
  user_academy_user_idTouser    user          @relation("academy_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appointment                   appointment[]
  user_user_academy_idToacademy user[]        @relation("user_academy_idToacademy")
}

model appointment {
  id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id                         String   @db.Uuid
  player_id                        String   @db.Uuid
  parent_id                        String?  @db.Uuid
  academy_id                       String   @db.Uuid
  start_time                       DateTime @db.Timestamp(6)
  end_time                         DateTime @db.Timestamp(6)
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  updated_at                       DateTime @default(now()) @db.Timestamp(6)
  academy                          academy  @relation(fields: [academy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_appointment_coach_idTouser  user     @relation("appointment_coach_idTouser", fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_appointment_parent_idTouser user?    @relation("appointment_parent_idTouser", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_appointment_player_idTouser user     @relation("appointment_player_idTouser", fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                   String        @unique @db.VarChar(255)
  firstName                               String?       @db.VarChar(255)
  lastName                                String?       @db.VarChar(255)
  roq_user_id                             String        @db.VarChar(255)
  tenant_id                               String        @db.VarChar(255)
  created_at                              DateTime      @default(now()) @db.Timestamp(6)
  updated_at                              DateTime      @default(now()) @db.Timestamp(6)
  academy_id                              String?       @db.Uuid
  academy_academy_user_idTouser           academy[]     @relation("academy_user_idTouser")
  appointment_appointment_coach_idTouser  appointment[] @relation("appointment_coach_idTouser")
  appointment_appointment_parent_idTouser appointment[] @relation("appointment_parent_idTouser")
  appointment_appointment_player_idTouser appointment[] @relation("appointment_player_idTouser")
  academy_user_academy_idToacademy        academy?      @relation("user_academy_idToacademy", fields: [academy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
